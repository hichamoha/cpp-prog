#ifndef EXIT_H
#define EXIT_H

#include <string>
#include <fstream>
#include <map>
#include <memory>

#include "key.h"

namespace camelot {

    class Environment;

    /*
      Exits are used in environments to allow actors travelling between
      different environments.
     */
    class Exit {
        public:
            const int id;

            ~Exit();
            Exit();
            explicit Exit(Environment *, bool has_lock=false, 
                          std::string code="", bool locked=false, 
                          std::string desc="");

            Environment * get_outfall() const;
            bool is_locked();
            void set_outfall(Environment *);
            void set_description(std::string);

            void set_key_code(std::string);
            void set_locked(bool);

            bool lock(std::shared_ptr<Key> );
            //bool lock(Key *);

            bool unlock(std::shared_ptr<Key> );
            //bool unlock(Key *);

            bool toggle_lock(std::shared_ptr<Key> );
            //bool toggle_lock(Key *);

            void saveExi(std::fstream &, std::string);
            static Exit * loadExi(std::string , const std::map<std::string, 
                               Environment *> &);
            //void clean_exits();  // FIXME
        private:
            Environment * outfall;
            std::string description;
            bool has_lock;
            std::string key_code;
            bool locked;

            static int instances;
    };

}
#endif /* EXIT_H */
